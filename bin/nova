#!/usr/bin/env bash
#
# Runs nova
#

ACTUAL_USER=$(id -un)
EXPECTED_USER='root'
PROGRAM_NAME="${0##*/}"

if [[ $ACTUAL_USER != $EXPECTED_USER ]]
then
    echo "ERROR: You should run '$PROGRAM_NAME' as user $EXPECTED_USER (not as $ACTUAL_USER)"
    exit 2
fi

NOVA_DOCKER_IMAGE=${NOVA_DOCKER_IMAGE-nova}
export PS4='[$LINENO]+'

[[ ! -z "$VERBOSE" ]] && set -x  # turn on debug if VERBOSE is set and non-null

# connected to terminal?
[[ -t 0 ]] && [[ -t 1 ]] && DOCKER_TERMINAL=' -t'

DOCKER_INTERACTIVE="--rm -i$DOCKER_TERMINAL"

HOST_OS_HOME=${HOST_OS_HOME-$HOME}
HOST_OS_PWD=${HOST_OS_PWD-$(pwd -P)}
DOCKER_ENVIRONMENT="-e VERBOSE=$VERBOSE -e DOCKER_HOST=$DOCKER_HOST -e HOST_OS_HOME=$HOST_OS_HOME -e HOST_OS_PWD=$HOST_OS_PWD"

if [[ "$HOME" =~ "/home/" ]] ;
  then DOCKER_VOLUMES="-v /home:/home -v $(pwd):$(pwd)"
  else DOCKER_VOLUMES="-v /Users:/Users"
fi;

# be careful of echoing a string that starts with '-e'

# simplify stringing together the args and ensure they are sorted (this could be done in ruby or perl as well)
AWS_CLI_ENV_ARGS=$(env | egrep "^AWS_" | sort | egrep -v "^[^=][^=]*=$" | sed -e 's/^\([^=][^=]*\)=\(.*\)$/\1="\2"/' | sed -e 's/^/-e /' | tr "\n" " ")

# Note: DOCKER_TERMINAL and DOCKER_INTERACTIVE are not environment variables
# simplify stringing together args that correspond to environment variables starting with DOCKER_
# docker-machine systems will link the docker daemon to the mst container via tcp
HOST_DOCKER_LINKAGE=$(env | egrep "^DOCKER_" | sort | egrep -v "^[^=][^=]*=$" | sed -e 's/^\([^=][^=]*\)=\(.*\)$/\1="\2"/' | sed -e 's/^/-e /' | tr "\n" " ")

if [[ -e "/var/run/docker.sock" ]]
  then HOST_DOCKER_LINKAGE="-v /var/run/docker.sock:/var/run/docker.sock $HOST_DOCKER_LINKAGE"
fi;

# Requires a permanent home on Dockerhub before we can use this
#docker_update() {
#  exec docker pull "$@"
#}

docker_run() {
  echo "About to run: exec docker run ${AWS_CLI_ENV_ARGS} $DOCKER_INTERACTIVE $DOCKER_ENVIRONMENT $DOCKER_VOLUMES $DOCKER_OPTIONS" "$@"
  exec docker run ${AWS_CLI_ENV_ARGS} $DOCKER_INTERACTIVE $DOCKER_ENVIRONMENT $DOCKER_VOLUMES $DOCKER_OPTIONS "$@"
}

if [[ $# -gt 0 && "z$1" == "zupdate" ]]; then
  REMOTE_ORIGIN_URL="$(git config --get remote.origin.url)"
  echo "Rebuild by checking out $REMOTE_ORIGIN_URL and running 'make'"
  exit 1
else
  docker_run \
    -w $HOST_OS_PWD \
    -v $HOST_OS_HOME/.aws:/root/.aws \
    -v $HOST_OS_HOME/.docker:/root/.docker \
    $HOST_DOCKER_LINKAGE \
    $NOVA_DOCKER_IMAGE "$@"
fi
